https://leetcode.com/problems/zigzag-conversion/solution/
  2d char array
  2d array traversal - partial output for each row and combine
  empty char array ( empty elements are either represented by 0 or '\u0000' )
  
https://leetcode.com/problems/reverse-integer/solution/
  integer overflow
  numbers are formed basically by nextNumber = currNumber * 10 + nextdigit, so you can check if nextNumber will overflow by checking currNumber and nextDigit
  if currNumber is more than (Interger_max / 10 ), nextNumber will overflow
  if currNumber is equal to (Interger_max / 10 ), nextNumber will overflow if nextdigit is more than 7 (Int max -> 2147483647, divide by 10, rem is 7) 
  for negative numbers, it will be nextdigit < -8
  
https://leetcode.com/problems/generate-parentheses/submissions/
  solved on my own
  made a classic mistake of not re-initiating values in recursion loop. i did not use 'new ArrayList' and 'new StringBuilder' in getRes inner call. 
  So 'brackets' and 'sb' variable were all processed in inner loops and then the last modified value was going to second getRes call.
  private static void getRes(List<String> brackets, List<String> res, StringBuilder sb, String itemToAdd, int n) 
	{
		. . .
		sb.append(itemToAdd);
		brackets.remove(itemToAdd);
		. . .
		getRes(new ArrayList<String>(brackets), res, new StringBuilder(sb), "(",n);
		getRes(brackets, res, sb, ")",n);
	}
  Look at below code
  public static void main(String[] args) 
	{	
		String s = "fcvbnm,";
		System.out.println(s.hashCode());
		test(s+"er");
		System.out.println(s.hashCode());
	}
	public static void test(String n) 
    {
        System.out.println(n.hashCode());
    }
   Output:
    -1017614972
    1324558641
    -1017614972
  The value of s is retained in the second sysout. When you send s+"er", it doesnt modify s. Instead it creates new object and sends to the function.
  Keep this in mind when writing recursion calls.
  
  https://leetcode.com/problems/combination-sum/submissions/
  in backtracking/recursion, when you have to add partial result to a final result, make final result a class variable. 
  always set your variables outside the recursion call
  	while(startIndex <= endIndex)
        {
            result.add(candidates[startIndex]);
            target-=candidates[startIndex];
            backtrack(startIndex, endIndex, candidates, result, target);
            target+=candidates[startIndex];
            result.remove((Integer)candidates[startIndex]);
            startIndex++;
        }
  see how the variables result and target are set before recursion call and unset after it. 
  also remember while adding this partial 'result' to a global results variable, copy over the contents of 'result' in new list and then add. lets say value 
  of result is [2,2,4]. you added it to resultList. in next iteration value of 'result' becomes [5], then resultList also will change.
  always do resultList.add(new ArrayList<Integer>(result))
  
  https://leetcode.com/problems/maximum-subarray/submissions/
  //kadanes algo -> if sum of prev array is less than zero, set currsum to zero
  
  https://leetcode.com/problems/graph-valid-tree/solutions/539585/graph-valid-tree/
  while building adjacency list (doesnt matter if you are using list or map) remember it works both ways.
  example : 0->1,2,3.  2->4,5
  while building adjacency list, it will hold total 7 entries (not just 2)
  0-1,2,3  1-0  2-0  3-0  2-4,5  4-2  5-2
  why so ? user can give you input like this also 1->0 , 2->0 (this is equivalent to 0->1,2) . Thats why  
  
  
  
  
